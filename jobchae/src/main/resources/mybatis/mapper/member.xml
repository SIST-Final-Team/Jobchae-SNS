<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="com.spring.app.member.model.MemberDAO">
	
	<!-- === 이준영 시작 === -->
	
	<!-- 아이디 중복체크 -->
	<select id="idDuplicateCheck" parameterType="String" resultType="String">
		SELECT MEMBER_ID
		FROM TBL_MEMBER
		WHERE MEMBER_ID = #{member_id}
	</select>
	
	
	
	<!-- 이메일 중복체크 -->
	<select id="emailCheck" parameterType="String" resultType="String">
		select member_email
		from tbl_member
		where member_email = #{member_email}
	</select>
	
	
	<!-- 지역 검색 자동 완성 -->
	<resultMap type="HashMap" id="regionMap">
		<result property="region_no" column="REGION_NO" javaType="String" />
		<result property="region_name" column="REGION_NAME" javaType="String" />
	</resultMap>
	<select id="regionSearchShow" parameterType="String" resultMap="regionMap">
		SELECT REGION_NO, REGION_NAME
		FROM TBL_REGION
		WHERE REGION_NAME LIKE '%' || #{region_name} || '%'
	</select>
	
	
	<!-- 회원가입 --> 
	<insert id="memberRegister" parameterType="MemberVO">
		
		INSERT INTO tbl_member(member_id, fk_region_no, member_passwd, member_name, member_birth, 
							   	   member_email, member_tel, member_profile, member_background_img)
		VALUES(#{member_id}, to_number(#{fk_region_no}), #{member_passwd}, #{member_name}, to_date(#{member_birth}, 'yyyy-mm-dd'),
			   #{member_email}, #{member_tel}, #{member_profile}, #{member_background_img})
	</insert>
	<!-- 회원가입시 회원설정 추가하기 -->
	<insert id="insertMemberSetting" parameterType="String">
		INSERT INTO tbl_member_setting(fk_member_id, member_setting_profile
					, member_setting_followed, member_setting_message
					, member_setting_following_board, member_setting_comment)
		VALUES(#{member_id}, default, default, default, default, default)
	</insert>

	
	<!-- 로그인 처리하기, 스케줄러 완성되면 조인문을 삭제하자. -->
	<select id="getLoginMember" parameterType="HashMap" resultType="MemberVO">	
		SELECT NVL(lastlogingap, TRUNC(MONTHS_BETWEEN(SYSDATE, MEMBER_REGISTER_DATE))) AS lastlogingap, -- 로그인 간격
       		   TRUNC(months_between(SYSDATE, MEMBER_PASSWDUPDATE_DATE)) AS passwdchangegap,             -- 비밀번호 변경 간격
       		   MEMBER_ID,                   -- 회원 아이디
       		   M.FK_REGION_NO,              -- 지역 일련번호
       		   MEMBER_PASSWD,               -- 비밀번호
       		   MEMBER_NAME,                 -- 성명
       		   to_char(MEMBER_BIRTH, 'yyyy-mm-dd') AS MEMBER_BIRTH, -- 생년월일
       		   MEMBER_EMAIL,                -- 이메일
       		   MEMBER_TEL,                  -- 전화번호
       		   MEMBER_REGISTER_DATE,        -- 가입일자 ,기본은 SYSDATE
       		   MEMBER_STATUS,               -- 가입상태 ,default 1,  정상: 1, 탈퇴: 2, 정지:3
       		   MEMBER_IS_COMPANY,           -- 기업 여부 ,기본값 0 0:개인 1: 기업
       		   MEMBER_IDLE,                 -- 휴면상태 ,기본값 0, 0: 정상 1: 휴면 (마지막으로 로그인 한 날짜시간이 현재시각으로 부터 1년이 지났으면 휴면으로 지정)
       		   MEMBER_PROFILE,              -- 프로필 사진
       		   MEMBER_BACKGROUND_IMG,       -- 프로필 배경 사진
       		   MEMBER_HIRE_STATUS,          -- 고용상태 , 이직/구직중 : 1, 채용중 : 2, 프리랜서 활동중 : 3
			   region_name,                 -- 지역명
			   member_career_company,       -- 회사명
       		   school_name                  -- 학교명
	   FROM TBL_MEMBER M
	   LEFT JOIN (SELECT TRUNC(MONTHS_BETWEEN(SYSDATE, MAX(LOGIN_DATE))) AS lastlogingap, fk_member_id
				  FROM TBL_LOGIN
				  WHERE fk_member_id = #{member_id}
				  GROUP BY fk_member_id) L
       ON M.MEMBER_ID = L.FK_MEMBER_ID
	   LEFT JOIN TBL_REGION R
	   ON M.FK_REGION_NO = R.REGION_NO
	   LEFT JOIN (SELECT member_career_company, fk_member_id
	              FROM TBL_MEMBER_CAREER
				  WHERE member_career_is_current = 1
				  ORDER BY member_career_startdate DESC) C 		-- 회원 경력
	   ON M.MEMBER_ID = C.FK_MEMBER_ID
	   LEFT JOIN (SELECT fk_school_no, fk_member_id
	              FROM TBL_MEMBER_EDUCATION
				  WHERE member_education_enddate >= SYSDATE
				  ORDER BY member_education_startdate DESC) E  	 -- 회원 학력
	   ON M.MEMBER_ID = E.FK_MEMBER_ID
	   LEFT JOIN tbl_school S
	   ON E.fk_school_no = S.school_no
	   WHERE MEMBER_STATUS = 1 AND MEMBER_ID = #{member_id} AND MEMBER_PASSWD = #{member_passwd} AND rownum = 1
	</select>
	
	
	
	
	<!--  로그인 기록 추가 -->
	<insert id="insert_tbl_login" parameterType="HashMap">
		INSERT INTO TBL_LOGIN(LOGIN_NO, FK_MEMBER_ID, LOGIN_CLIENT_IP)
		VALUES(SEQ_LOGIN_NO.NEXTVAL, #{member_id}, #{clientip})
	</insert>
	
	
	<!-- 회원 휴면을 자동으로 지정해주는 스케줄러 -->
	<update id="deactivateMember_idle">
		UPDATE tbl_member SET member_idle = 0 
		WHERE member_id = (SELECT fk_member_id
						   FROM tbl_login
						   GROUP BY fk_member_id
						   HAVING MAX(login_date) &lt; ADD_MONTHS(SYSDATE, -12))
	</update>
	
	
	<!-- 휴면 해제 실행 메소드 -->
	<update id="memberReactivation" parameterType="String">
		UPDATE tbl_member SET member_idle = 0 WHERE member_id = #{member_id}
	</update>
	
	

	<!-- 비밀번호 중복 확인  -->
	<select id="passwdExist" parameterType="HashMap" resultType="String">
		SELECT member_passwd
		FROM tbl_member
		WHERE member_id = #{member_id} and member_passwd = #{new_member_passwd}
	</select>
	
	
	<!-- 비밀번호가 일치하지 않는 새 비밀번호인 경우 비밀번호 변경 하고 비밀번호 변경날짜 갱신 -->
	<update id="passwdUpdate" parameterType="HashMap">
		UPDATE tbl_member SET member_passwd = #{new_member_passwd}, member_passwdupdate_date = SYSDATE 
		WHERE member_id = #{member_id}
	</update>
	
	

	<!-- 아이디찾기 메소드 -->
	<select id="idFind" parameterType="HashMap" resultType="String">
		SELECT member_id
		FROM tbl_member
		WHERE member_name = #{member_name} AND member_email = #{member_email}
	</select>
	
	<!-- 회원이 존재하는지 검사하는 메소드 -->
	<select id="isExistMember" parameterType="HashMap" resultType="String">
		SELECT member_name
		FROM tbl_member
		WHERE member_id = #{member_id} AND member_passwd = #{member_passwd}
	</select>
	
	<!-- 회원 탈퇴(비활성화) -->
	<update id="memberDisable" parameterType="HashMap">
		UPDATE tbl_member SET member_status = 2 WHERE member_id = #{member_id}
	</update>
	
	
	<!-- 탈퇴한 회원 한달 뒤 자동삭제 스캐줄러 -->
	<delete id="memberDelete">
		DELETE FROM tbl_member
		WHERE member_status = (SELECT member_status
                       		   FROM tbl_member
                       		   WHERE member_disable_date &lt; ADD_MONTHS(SYSDATE, -1))
	</delete>
	
	
	<insert id="memberDisableDate">
		INSERT tbl_member(member_disable_date)
		VALUES(SYSDATE)
	</insert>
	
	
	<!-- 탈퇴한 회원 파일명을 리스트로 가져오기 검색 -->
	<resultMap type="HashMap" id="disableFileList_map">
		<result column="member_profile"   		property="member_profile"   		javaType="String"/>
		<result column="member_background_img" 	property="member_background_img" 	javaType="String"/>
	</resultMap>
	<select id="disableFileList" resultMap="disableFileList_map">
		SELECT member_profile, member_background_img
		FROM tbl_member
		WHERE member_status = 2
	</select>
	
	
	<!-- === 이준영 끝 === -->
	
	




	<!-- === 김규빈 시작 === -->

	<!-- 회원 한 명의 정보 조회 -->
	<select id="getMember" parameterType="HashMap" resultType="MemberVO">
		select member_id, m.fk_region_no, member_name
			, member_birth, member_email, member_tel, member_register_date
			, member_passwdupdate_date, member_status, member_idle
			, member_is_company , member_profile, member_background_img, member_hire_status
			, r.region_name, mc.member_career_company, s.school_name
			<!-- 팔로우 여부 표시 -->
			<if test="login_member_id != null">
				, NVL2(f.following_id, '1', '0') as isFollow
			</if>
		from tbl_member m
		left join tbl_member_setting ms
		on m.member_id = ms.fk_member_id
		<!-- 팔로우 여부 표시 -->
		<if test="login_member_id != null">
			left join
			(
				select following_id
				from tbl_follow
				where follower_id = #{login_member_id}
			) f
			on m.member_id = f.following_id
		</if>
		left join tbl_region r
		on m.fk_region_no = r.region_no
		LEFT JOIN (SELECT member_career_company, fk_member_id
					FROM TBL_MEMBER_CAREER
					WHERE member_career_is_current = 1 AND rownum = 1
					ORDER BY member_career_enddate, member_career_startdate DESC) mc
		ON m.MEMBER_ID = mc.FK_MEMBER_ID
		LEFT JOIN (SELECT fk_school_no, fk_member_id
					FROM TBL_MEMBER_EDUCATION
					WHERE member_education_enddate &gt;= SYSDATE AND rownum = 1
					ORDER BY member_education_enddate, member_education_startdate DESC) me
		ON m.MEMBER_ID = me.FK_MEMBER_ID
		LEFT JOIN tbl_school s
		on me.fk_school_no = s.school_no
		where member_id = #{member_id} and member_status = 1 and (ms.member_setting_profile = 1 OR m.member_id = #{login_member_id})
	</select>
	
	<!-- 자동완성을 위한 직종 목록 조회 및 검색 -->
	<resultMap type="HashMap" id="jobMap">
		<result column="job_no" property="job_no" javaType="String"/>
		<result column="job_name" property="job_name" javaType="String"/>
	</resultMap>
	<select id="getJobListForAutocomplete" parameterType="HashMap" resultMap="jobMap">
		select job_no, job_name
		from tbl_job
		where job_name like '%' || #{job_name} || '%' and rownum &lt;= to_number(#{size})
	</select>
	
	<!-- 자동완성을 위한 회사 목록 조회 및 검색 -->
	<resultMap type="HashMap" id="companyMap">
		<result column="company_no"   property="company_no"   javaType="String"/>
		<result column="company_name" property="company_name" javaType="String"/>
		<result column="company_logo" property="company_logo" javaType="String"/>
	</resultMap>
	<select id="getCompanyListForAutocomplete" parameterType="HashMap" resultMap="companyMap">
		select company_no, company_name, company_logo
		from tbl_company
		where lower(company_name) like '%'|| lower(#{company_name}) || '%' and rownum &lt;= to_number(#{size})
	</select>
	
	<!-- 자동완성을 위한 전공 목록 조회 및 검색 -->
	<resultMap type="HashMap" id="majorMap">
		<result column="major_no" property="major_no" javaType="String"/>
		<result column="major_name" property="major_name" javaType="String"/>
	</resultMap>
	<select id="getMajorListForAutocomplete" parameterType="HashMap" resultMap="majorMap">
		select major_no, major_name
		from tbl_major
		where major_name like '%'|| #{major_name} || '%' and rownum &lt;= to_number(#{size})
	</select>
	
	<!-- 자동완성을 위한 학교 목록 조회 및 검색 -->
	<resultMap type="HashMap" id="schoolMap">
		<result column="school_no"   property="school_no"   javaType="String"/>
		<result column="school_name" property="school_name" javaType="String"/>
		<result column="school_logo" property="school_logo" javaType="String"/>
	</resultMap>
	<select id="getSchoolListForAutocomplete" parameterType="HashMap" resultMap="schoolMap">
		select school_no, school_name, school_logo
		from tbl_school
		where school_name like '%'|| #{school_name} || '%' and rownum &lt;= to_number(#{size})
	</select>
	
	<!-- 자동완성을 위한 보유기술 목록 조회 및 검색 -->
	<resultMap type="HashMap" id="skillMap">
		<result column="skill_no" property="skill_no" javaType="String"/>
		<result column="skill_name" property="skill_name" javaType="String"/>
	</resultMap>
	<select id="getSkillListForAutocomplete" parameterType="HashMap" resultMap="skillMap">
		select skill_no, skill_name
		from tbl_skill
		where skill_name like '%'|| #{skill_name} || '%' and rownum &lt;= to_number(#{size})
	</select>
	
	<!-- === 회원 경력 시작 === -->
	<!-- 회원 경력 1개 조회 -->
	<select id="getMemberCareer" parameterType="HashMap" resultType="MemberCareerVO">
		SELECT member_career_no, mc.fk_member_id, mc.fk_region_no, r.region_name
			 , mc.fk_job_no, j.job_name, fk_company_no, company_logo, member_career_company, member_career_type
			 , to_char(member_career_startdate, 'yyyy-mm') AS member_career_startdate
			 , to_char(member_career_enddate, 'yyyy-mm') AS member_career_enddate
			 , member_career_explain
			 , member_career_is_current
		FROM tbl_member_career mc
		JOIN tbl_member_setting ms
		ON mc.fk_member_id = ms.fk_member_id
		JOIN tbl_region r
		ON mc.fk_region_no = r.region_no
		JOIN tbl_job j
		ON mc.fk_job_no = j.job_no
		LEFT JOIN tbl_company c
		ON mc.fk_company_no = c.company_no
		WHERE member_career_no = #{member_career_no} AND (ms.member_setting_profile = 1 OR mc.fk_member_id = #{login_member_id})
	</select>
	
	<!-- 한 회원의 경력 모두 조회 -->
	<select id="getMemberCareerListByMemberId" parameterType="HashMap" resultType="MemberCareerVO">
		SELECT member_career_no, mc.fk_member_id, mc.fk_region_no, r.region_name
			 , mc.fk_job_no, j.job_name, fk_company_no, company_logo, member_career_company, member_career_type
			 , to_char(member_career_startdate, 'yyyy-mm') AS member_career_startdate
			 , to_char(member_career_enddate, 'yyyy-mm') AS member_career_enddate
			 , member_career_explain
			 , member_career_is_current
		FROM tbl_member_career mc
		JOIN tbl_member_setting ms
		ON mc.fk_member_id = ms.fk_member_id
		JOIN tbl_region r
		ON mc.fk_region_no = r.region_no
		JOIN tbl_job j
		ON mc.fk_job_no = j.job_no
		LEFT JOIN tbl_company c
		ON mc.fk_company_no = c.company_no
		WHERE mc.fk_member_id = #{member_id} AND (ms.member_setting_profile = 1 OR mc.fk_member_id = #{login_member_id})
		<if test="size != null">AND rownum &lt;= #{size}</if>
		ORDER BY member_career_enddate DESC, member_career_startdate DESC
	</select>

	<!-- 회원 경력 등록 -->
	<insert id="insertMemberCareer" parameterType="MemberCareerVO">
		insert into tbl_member_career(member_career_no, fk_member_id, fk_region_no, fk_job_no, fk_company_no, member_career_is_current
		          , member_career_company, member_career_type, member_career_startdate, member_career_enddate, member_career_explain)
		values(seq_member_career_no.nextval, #{fk_member_id}, to_number(#{fk_region_no}), to_number(#{fk_job_no})
			 <if test="fk_company_no != null">, to_number(#{fk_company_no})</if>
			 <if test="fk_company_no == null">, null</if>
			 <if test="member_career_is_current != null">, 1</if>
			 <if test="member_career_is_current == null">, 0</if>
		     , #{member_career_company}, to_number(#{member_career_type}), to_date(#{member_career_startdate}, 'yyyy-mm')
		     <if test="member_career_enddate != null">, to_date(#{member_career_enddate}, 'yyyy-mm')</if>
		     <if test="member_career_enddate == null">, null</if>
		     , #{member_career_explain})
	</insert>
	
	<!-- 회원 경력 수정 -->
	<update id="updateMemberCareer" parameterType="MemberCareerVO">
		update tbl_member_career set fk_region_no = to_number(#{fk_region_no}), fk_job_no = to_number(#{fk_job_no})
				  <if test="fk_company_no != null">,fk_company_no = to_number(#{fk_company_no})</if>
				  <if test="fk_company_no == null">,fk_company_no = null</if>
			      <if test="member_career_is_current != null">, member_career_is_current = 1</if>
			      <if test="member_career_is_current == null">, member_career_is_current = 0</if>
		          , member_career_company = #{member_career_company}, member_career_type = to_number(#{member_career_type})
		          , member_career_startdate = to_date(#{member_career_startdate}, 'yyyy-mm')
			      <if test="member_career_enddate != null">,member_career_enddate = to_date(#{member_career_enddate}, 'yyyy-mm')</if>
			      <if test="member_career_enddate == null">,member_career_enddate = null</if>
		          , member_career_explain = #{member_career_explain}
		where member_career_no = #{member_career_no} and fk_member_id = #{fk_member_id}
	</update>
	
	<!-- 회원 경력 삭제 -->
	<delete id="deleteMemberCareer" parameterType="HashMap">
		delete from tbl_member_career
		where member_career_no = #{member_career_no} and fk_member_id = #{fk_member_id}
	</delete>
	<!-- === 회원 경력 끝 === -->
	
	<!-- === 회원 학력 시작 === -->
	<!-- 회원 학력 1개 조회 -->
	<select id="getMemberEducation" parameterType="HashMap" resultType="MemberEducationVO">
		select member_education_no, me.fk_member_id, fk_school_no, school_name, school_logo, fk_major_no, major_name
			, member_education_degree
			, to_char(member_education_startdate, 'yyyy-mm') AS member_education_startdate
			, to_char(member_education_enddate, 'yyyy-mm') AS member_education_enddate
			, member_education_grade, member_education_explain
		from tbl_member_education me
		JOIN tbl_member_setting ms
		ON me.fk_member_id = ms.fk_member_id
		join tbl_school s
		on me.fk_school_no = s.school_no
		join tbl_major m
		on me.fk_major_no = m.major_no
		WHERE member_education_no = #{member_education_no} AND (ms.member_setting_profile = 1 OR me.fk_member_id = #{login_member_id})
	</select>
	
	<!-- 한 회원의 학력 모두 조회 -->
	<select id="getMemberEducationListByMemberId" parameterType="HashMap" resultType="MemberEducationVO">
		select member_education_no, me.fk_member_id, fk_school_no, school_name, school_logo, fk_major_no, major_name
			, member_education_degree
			, to_char(member_education_startdate, 'yyyy-mm') AS member_education_startdate
			, to_char(member_education_enddate, 'yyyy-mm') AS member_education_enddate
			, member_education_grade, member_education_explain
		from tbl_member_education me
		JOIN tbl_member_setting ms
		ON me.fk_member_id = ms.fk_member_id
		join tbl_school s
		on me.fk_school_no = s.school_no
		join tbl_major m
		on me.fk_major_no = m.major_no
		WHERE me.fk_member_id = #{member_id} AND (ms.member_setting_profile = 1 OR me.fk_member_id = #{login_member_id})
		<if test="size != null">AND rownum &lt;= #{size}</if>
		ORDER BY member_education_enddate DESC, member_education_startdate DESC
	</select>

	<!-- 회원 학력 등록 -->
	<insert id="insertMemberEducation" parameterType="MemberEducationVO">
		insert into tbl_member_education(member_education_no, fk_member_id, fk_school_no, 
			fk_major_no, member_education_degree, member_education_startdate,
			member_education_enddate, member_education_grade,
			member_education_explain)
		values(seq_member_education_no.nextval, #{fk_member_id}, to_number(#{fk_school_no}), to_number(#{fk_major_no}),
			to_number(#{member_education_degree}),
			to_date(#{member_education_startdate}, 'yyyy-mm'),
			to_date(#{member_education_enddate}, 'yyyy-mm'),
			to_number(#{member_education_grade}), #{member_education_explain})
	</insert>
	
	<!-- 회원 학력 수정 -->
	<update id="updateMemberEducation" parameterType="MemberEducationVO">
		update tbl_member_education SET fk_member_id = #{fk_member_id}, 
			fk_school_no = to_number(#{fk_school_no}),
			fk_major_no = to_number(#{fk_major_no}),
			member_education_degree = to_number(#{member_education_degree}),
			member_education_startdate = to_date(#{member_education_startdate}, 'yyyy-mm'),
			member_education_enddate = to_date(#{member_education_enddate}, 'yyyy-mm'),
			member_education_grade = to_number(#{member_education_grade}),
			member_education_explain = #{member_education_explain}
		where member_education_no = #{member_education_no} and fk_member_id = #{fk_member_id}
	</update>
	
	<!-- 회원 학력 삭제 -->
	<delete id="deleteMemberEducation" parameterType="HashMap">
		delete from tbl_member_education
		where member_education_no = #{member_education_no} and fk_member_id = #{fk_member_id}
	</delete>
	<!-- === 회원 학력 끝 === -->
	
	<!-- === 회원 보유기술 시작 === -->
	<!-- 회원 보유기술 1개 조회 -->
	<select id="getMemberSkill" parameterType="HashMap" resultType="MemberSkillVO">
		select member_skill_no, msk.fk_member_id, fk_skill_no, skill_name
		from tbl_member_skill msk
		join tbl_member_setting ms
		on msk.fk_member_id = ms.fk_member_id
		join tbl_skill sk
		on msk.fk_skill_no = sk.skill_no
		where member_skill_no = #{member_skill_no} AND (ms.member_setting_profile = 1 OR msk.fk_member_id = #{login_member_id})
		ORDER BY skill_name
	</select>
	
	<!-- 한 회원의 보유기술 모두 조회 -->
	<select id="getMemberSkillListByMemberId" parameterType="HashMap" resultType="MemberSkillVO">
		select member_skill_no, msk.fk_member_id, fk_skill_no, skill_name
		from tbl_member_skill msk
		join tbl_member_setting ms
		on msk.fk_member_id = ms.fk_member_id
		join tbl_skill sk
		on msk.fk_skill_no = sk.skill_no
		WHERE msk.fk_member_id = #{member_id} AND (ms.member_setting_profile = 1 OR msk.fk_member_id = #{login_member_id})
		<if test="size != null">AND rownum &lt;= #{size}</if>
	</select>

	<!-- 회원 보유기술 등록 -->
	<insert id="insertMemberSkill" parameterType="MemberSkillVO">
		insert into tbl_member_skill(member_skill_no, fk_member_id, fk_skill_no)
		values(seq_member_skill_no.nextval, #{fk_member_id}, #{fk_skill_no})
	</insert>
	
	<!-- 회원 보유기술 삭제 -->
	<delete id="deleteMemberSkill" parameterType="HashMap">
		delete from tbl_member_skill
		where member_skill_no = #{member_skill_no} and fk_member_id = #{fk_member_id}
	</delete>
	<!-- === 회원 보유기술 끝 === -->

	<!-- 회원의 이름, 프로필 이미지 목록 조회 -->
	<select id="getMemberListByMemberId" parameterType="ArrayList" resultType="MemberVO">
		select member_id, member_birth, member_name, member_profile
		from tbl_member m
		where member_id in
		<foreach collection="memberIdList" index="i" open="(" separator="," close=")">
			'${memberIdList[i]}'
		</foreach>
		and member_status = 1
		order by DECODE(member_id, 
		<foreach collection="memberIdList" index="i" open="" separator="," close=")">
			'${memberIdList[i]}',${i}
		</foreach>
	</select>

	<!-- 회원 프로필 배경 수정 -->
	<update id="updateMemberBackgroundImg" parameterType="MemberVO">
		update tbl_member SET member_background_img = #{member_background_img}
		where member_id = #{member_id}
	</update>

	<!-- 회원 프로필 사진 수정 -->
	<update id="updateMemberProfile" parameterType="MemberVO">
		update tbl_member SET member_profile = #{member_profile}
		where member_id = #{member_id}
	</update>

	<!-- 팔로워 수 가져오기 -->
	<select id="getFollowerCount" parameterType="String" resultType="int">
		select count(*) AS followerCount
		from tbl_follow
		where following_id = #{member_id}
	</select>

	<!-- 회원 정보 수정 -->
	<update id="updateMember" parameterType="MemberVO">
		UPDATE tbl_member SET member_id = member_id
		<if test='member_passwd != ""'>
			, member_passwd = #{member_passwd}
			, member_passwdupdate_date = SYSDATE
		</if>
		<if test='member_name != ""'>
			, member_name = #{member_name}
		</if>
		<if test='member_birth != ""'>
			, member_birth = #{member_birth}
		</if>
		<if test='member_email != ""'>
			, member_email = #{member_email}
		</if>
		<if test='member_tel != ""'>
			, member_tel = #{member_tel}
		</if>
		<if test='fk_region_no != ""'>
			, fk_region_no = #{fk_region_no}
		</if>
		WHERE member_id = #{member_id}
	</update>

	<!-- === 김규빈 끝 === -->

	<!-- === 연규영 시작 === -->
	<select id="getAlarmMemberInfoByMemberId" resultType="MemberVO">
		select member_id, member_birth, member_is_company ,member_name, member_profile
		from tbl_member where member_id = #{member_id}
	</select>


	<!-- === 연규영 끝 === -->

	<!-- === 이진호 시작 === -->
	<!-- 🚨 신고 기록 추가 🚨  --> 
	<insert id="createReport" parameterType="ReportVO">
   		 insert into tbl_report (report_no, fk_member_id, fk_reported_member_id, report_type, additional_explanation)
   		 values (seq_report_no.nextval, #{fk_member_id}, #{fk_reported_member_id}, #{report_type}, #{additional_explanation})
	</insert>


<!--  🚨 신고 횟수 조회 🚨 
	<select id="getReportedCount" resultType="int" parameterType="string">
		select count(*)
		from tbl_report
		where fk_reported_member_id = #{reportedMemberId}
	</select>

	🚨 회원 정지 처리 🚨
	<update id="banMember" parameterType="string">
		update tbl_member
		set member_status = 3
		where member_id = #{reportedMemberId}
-->

	<!-- === 이진호 끝 === -->
</mapper>
