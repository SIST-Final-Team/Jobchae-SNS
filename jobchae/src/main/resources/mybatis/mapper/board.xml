<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="com.spring.app.board.model.BoardDAO">

	<!-- 파일첨부가 없는 글쓰기 -->
	<insert id="add" parameterType="HashMap" >
		<selectKey keyProperty="board_no" resultType="String" order="AFTER">
        	select seq_board_no.currVal from dual
    	</selectKey>
		insert into tbl_board(board_no, fk_member_id, board_content, board_visibility, board_comment_allowed, board_register_date, board_parent_no, board_group_no, board_depth, board_is_delete)
		values(seq_board_no.nextVal, #{fk_member_id}, #{board_content}, #{board_visibility}, default, default, default, seq_board_no.currVal, default, default)
	</insert>
	
	<!-- 파일첨부가 있는 글쓰기 -->
	<insert id="addWithFile" parameterType="HashMap" >
		insert into tbl_file(file_no, file_target_no, file_target_type, file_name, file_original_name, file_size, file_register_date)
		values(seq_file_no.nextVal, #{file_target_no}, 'board', #{file_name}, #{file_original_name}, #{file_size}, default)
	</insert>
	
	
	
	
	<!-- 로그인된 사용자의 정보 얻어오기 -->
	<select id="getUserInfo" resultType="MemberVO" parameterType="String">
		SELECT m.member_id, 
	       m.member_name, 
	       m.member_birth, 
	       m.member_profile, 
	       m.member_background_img,
	       (SELECT COUNT(*) 
	        FROM tbl_follow f
	        WHERE f.following_id = m.member_id) AS follower_count
		FROM tbl_member m
		WHERE m.member_id = #{login_userid}
	</select>
	
	
	
	
	
	<!-- 피드 조회하기 -->
	<select id="getAllBoards" resultType="BoardVO" parameterType="HashMap">
       	SELECT DISTINCT b.board_no, b.fk_member_id, b.board_content, b.board_visibility, 
		       b.board_comment_allowed, b.board_register_date, b.board_parent_no, 
		       b.board_group_no, b.board_depth, b.board_is_delete, 
		       m.member_id, m.member_name, m.member_birth, m.member_profile
		FROM tbl_board b
		JOIN tbl_member m ON b.fk_member_id = m.member_id
		LEFT JOIN tbl_follow f ON m.member_id = f.following_id
		LEFT JOIN tbl_ignored i ON b.board_no = i.fk_board_no AND i.fk_member_id = #{login_userid}
		WHERE b.board_is_delete = 0 
		AND (f.follower_id = #{login_userid} OR b.fk_member_id = #{login_userid})
		AND i.fk_board_no IS NULL  
		ORDER BY b.board_register_date DESC

	</select>

	<!-- 각 피드별 파일 존재여부 검사 -->
	<select id="getFiles" resultType="FileVO" parameterType="String">
		select file_no, file_target_no, file_target_type, file_name, file_original_name, file_size, file_register_date
		from tbl_file
		where file_target_no = #{board_no}
	</select>


	<!-- 글 삭제 -->
	<update id="deleteBoard" parameterType="HashMap">
		update tbl_board set board_is_delete = 1
		where fk_member_id = #{fk_member_id} and board_no = #{board_no}
	</update>	
	
	<!-- 글 수정 
	<update id="editBoard" parameterType="HashMap">
		update tbl_board set board_content = #{board_content}, board_visibility = #{board_visibility}
		where board_no = #{board_no} and fk_member_id = #{fk_member_id}	
	</update>-->
	
	<!-- 게시물 반응 -->
	<insert id="reactionBoard" parameterType="HashMap">
		insert into tbl_reaction(reaction_no, fk_member_id, reaction_target_no, reaction_target_type, reaction_status, reaction_register_date)
		values(seq_reaction_no.nextVal, #{fk_member_id}, #{reaction_target_no}, 'board', #{reaction_status}, default)
	</insert>
	
	<!-- 게시물 반응 삭제 -->
	<delete id="deleteReactionBoard" parameterType="HashMap">
		delete from tbl_reaction
		where fk_member_id = #{fk_member_id} and reaction_target_no = #{reaction_target_no}
	</delete>	
	
	<!-- 게시물 반응 조회 -->
	<select id="selectReaction" resultType="ReactionVO" parameterType="ReactionVO">
		select reaction_no, fk_member_id, reaction_target_no, reaction_target_type, reaction_status, reaction_register_date
		from tbl_reaction
		where fk_member_id = #{fk_member_id} and reaction_target_no = #{reaction_target_no}
	</select>
	
	<!-- 이미 반응 누른 경우, 유니크키 때문에 update 처리 -->
	<update id="updateReactionBoard" parameterType="HashMap">
		update tbl_reaction set reaction_status = #{reaction_status}
		where fk_member_id = #{fk_member_id} and reaction_target_no = #{reaction_target_no}
	</update>
	
	<!-- 글 허용범위 -->
	<update id="updateBoardVisibility" parameterType="HashMap">
		update tbl_board set board_visibility = #{board_visibility}, board_comment_allowed = #{board_comment_allowed}
		where fk_member_id = #{fk_member_id} and board_no = #{board_no}
	</update>
	
	<!-- 반응 조회하기 -->
	<select id="getAllReaction" resultType="ReactionVO" parameterType="String">
		select reaction_no, fk_member_id, reaction_target_no, reaction_target_type, reaction_status, reaction_register_date
		from tbl_reaction
		where fk_member_id = #{login_userid}
	</select>
	
	<!-- 피드별 반응 개수 조회하기 -->
	<resultMap type="HashMap" id="reactionCountMap" >
	    <result column="reaction_target_no" property="reaction_target_no" 	javaType="String" />
	    <result column="reaction_count" 	property="reaction_count" 		javaType="String" />
	</resultMap>
	<select id="getReactionCount" resultMap="reactionCountMap">
		select reaction_target_no, count(*) as reaction_count
		from tbl_reaction
		group by reaction_target_no
	</select>
	
	<!-- 반응 개수 조회하기 (AJAX) -->
	<select id="getReactionCount2" parameterType="String" resultType="int">
		SELECT COUNT(*) 
    	FROM tbl_reaction
    	WHERE reaction_target_no = #{reaction_target_no}
	</select>
	
	<!-- 팔로워 수 구하기 -->
	<select id="getFollowerCount" parameterType="String">
		select count(*) as follower_count
		from tbl_follow
		where following_id = #{following_id}
	</select>
	
	<!-- 게시물 반응 개수 조회하기 -->
	<resultMap type="HashMap" id="reactionCountsMap">
	    <result property="1" column="1" javaType="String" />
	    <result property="2" column="2" javaType="String" />
	    <result property="3" column="3" javaType="String"/>
	    <result property="4" column="4" javaType="String"/>
	    <result property="5" column="5" javaType="String"/>
	    <result property="6" column="6" javaType="String"/>
	    <result property="7" column="7" javaType="String"/>
  	</resultMap>
	<select id="getReactionCounts" resultMap="reactionCountsMap">
	    select
		    count(case when reaction_status = 1 then 1 end) as "1",
		    count(case when reaction_status = 2 then 1 end) as "2",
		    count(case when reaction_status = 3 then 1 end) as "3",
		    count(case when reaction_status = 4 then 1 end) as "4",
		    count(case when reaction_status = 5 then 1 end) as "5",
		    count(case when reaction_status = 6 then 1 end) as "6",
		    count(case when reaction_status in (1, 2, 3, 4, 5, 6) then 1 end) as "7"
		from tbl_reaction
		where reaction_target_no = #{reaction_target_no}
  	</select>
	
	<!-- 게시물 반응별 유저 조회하기 -->
	<select id="getReactionMembers" resultType="MemberVO" parameterType="HashMap">
		select
			m.member_id, m.member_name, m.member_birth, m.member_profile
		from tbl_reaction r
		join tbl_member m on r.fk_member_id = m.member_id
		<where>
	        <if test="reaction_status != 7">
	            r.reaction_target_no = #{reaction_target_no} 
	            and r.reaction_status = #{reaction_status}
	        </if>
	        <if test="reaction_status == 7">
	            r.reaction_target_no = #{reaction_target_no}
	        </if>
	    </where>
	</select>	
	
	
	<!-- 게시글 북마크 추가하기 -->
	<insert id="addBookmarkBoard" parameterType="HashMap">
		insert into tbl_bookmark(bookmark_no, fk_member_id, bookmark_target_no, bookmark_target_type, bookmark_register_date)
		values(seq_bookmark_no.nextVal, #{fk_member_id}, #{bookmark_target_no}, 'board', default)
	</insert>
	
	<!-- 게시글 북마크 조회하기 -->
	<select id="selectBookmarkBoard" parameterType="HashMap">
		select count(*)
		from tbl_bookmark
		where fk_member_id = #{fk_member_id} and bookmark_target_no = #{bookmark_target_no}
	</select>
	
	<!-- 게시글 북마크 삭제하기 -->
	<delete id="deleteBookmarkBoard" parameterType="HashMap">
		delete from tbl_bookmark
		where fk_member_id = #{fk_member_id} and bookmark_target_no = #{bookmark_target_no}
	</delete>
	
	
	<!-- 댓글 등록하기 -->
	<insert id="addComment" parameterType="HashMap">
		insert into tbl_comment(comment_no, fk_board_no, fk_member_id, comment_content, comment_parent_no, comment_group_no, comment_depth, comment_register_date)
		values(seq_comment_no.nextVal, #{fk_board_no}, #{fk_member_id}, #{comment_content}, default, seq_comment_no.currval, default, default)
	</insert>
	
	<!-- 부모댓글 조회하기 -->
	<select id="getAllComments" parameterType="String" resultType="CommentVO">
		select c.comment_no, c.fk_board_no, c.fk_member_id, c.comment_content, c.comment_parent_no, c.comment_group_no, c.comment_depth, c.comment_register_date, m.member_name, m.member_profile
		from tbl_comment c
		join tbl_member m
		on c.fk_member_id = m.member_id
		where c.fk_board_no = #{board_no} and c.comment_depth = 0
		order by c.comment_register_date desc
	</select>
	
	<!-- 댓글 수 구하기 -->
	<select id="getCommentCount" parameterType="String">
		select count(*) as comment_count
		from tbl_comment
		where fk_board_no = #{board_no}
	</select>
	
	<!-- 부모 댓글 삭제하기 (자식 댓글도 삭제됨) -->
	<delete id="deleteComment" parameterType="HashMap">
		delete from tbl_comment
		where comment_group_no = #{comment_no}
	</delete>
	
	<!-- 자식 댓글만 삭제 -->
	<delete id="deleteReplyComment" parameterType="HashMap">
		delete from tbl_comment
		where fk_board_no = #{fk_board_no} and comment_no = #{comment_no} and comment_depth = 1
	</delete>
	
	<!-- 댓글 수정하기 -->
	<update id="editComment" parameterType="HashMap">
		update tbl_comment set comment_content = #{comment_content}
		where fk_board_no = #{fk_board_no} and comment_no = #{comment_no} and fk_member_id = #{fk_member_id}
	</update>
	
	
	<!-- 관심없음 등록하기 -->
	<insert id="ignoredBoard" parameterType="HashMap">
		insert into tbl_ignored(ignored_no, fk_member_id, fk_board_no, ignored_register_date)
		values(seq_ignored_no.nextVal, #{fk_member_id}, #{fk_board_no}, default)
	</insert>
	
	
	<!-- 대댓글 등록하기 -->
	<insert id="addCommentReply" parameterType="HashMap">
		insert into tbl_comment(comment_no, fk_board_no, fk_member_id, comment_content, comment_parent_no, comment_group_no, comment_depth, comment_register_date)
		values(seq_comment_no.nextVal, #{fk_board_no}, #{fk_member_id}, #{comment_content}, #{comment_no}, #{comment_no}, 1, default)
	</insert>
	
	
	
	<!-- 파일 조회하기 -->
	<select id="selectFileList" parameterType="HashMap">
		select file_no, file_target_no, file_name, file_original_name, file_size
		from tbl_file
		where file_target_no = #{file_target_no}
	</select>
	
	
	
	<!-- 글 수정 -->
	<update id="editBoard" parameterType="HashMap">
		update tbl_board set board_content = #{board_content}, board_visibility = #{board_visibility}
		where board_no = #{board_no} and fk_member_id = #{fk_member_id}	
	</update>
	
	
	<!-- 파일 조회하기 -->
	<select id="selectFileList2" resultType="FileVO" parameterType="String">
		select file_no, file_target_no, file_name, file_original_name, file_size
		from tbl_file
		where file_target_no = #{board_no}
	</select>
	
	
	<!-- 피일 삭제 (수정) -->
	<delete id="deleteFiles" parameterType="java.util.List">
		delete from tbl_file where file_no in
		<foreach item="file_no" collection="list" open="(" separator="," close=")">
	        #{file_no}
	    </foreach>
	</delete>
	
	<!-- 파일 첨수 (수정) -->
	<insert id="editBoardWithFiles" parameterType="HashMap" >
		insert into tbl_file(file_no, file_target_no, file_target_type, file_name, file_original_name, file_size, file_register_date)
		values(seq_file_no.nextVal, #{board_no}, 'board', #{file_name}, #{file_original_name}, #{file_size}, default)
	</insert>
	
	
	
	<!-- 반응 많은 순 상위 1~3개 추출하기 -->
	<resultMap type="HashMap" id="topReactionCountsMap">
	    <result property="reaction_status_1" column="reaction_status_1" javaType="String" />
	    <result property="reaction_status_2" column="reaction_status_2" javaType="String" />
	    <result property="reaction_status_3" column="reaction_status_3" javaType="String"/>
	    <result property="reaction_status_4" column="reaction_status_4" javaType="String"/>
	    <result property="reaction_status_5" column="reaction_status_5" javaType="String"/>
	    <result property="reaction_status_6" column="reaction_status_6" javaType="String"/>
  	</resultMap>
	<select id="getTopReactionsForBoard" parameterType="String" resultMap="topReactionCountsMap">
		select 
		    count(case when r.reaction_status = '1' then 1 end) as reaction_status_1,
		    count(case when r.reaction_status = '2' then 1 end) as reaction_status_2,
		    count(case when r.reaction_status = '3' then 1 end) as reaction_status_3,
		    count(case when r.reaction_status = '4' then 1 end) as reaction_status_4,
		    count(case when r.reaction_status = '5' then 1 end) as reaction_status_5,
		    count(case when r.reaction_status = '6' then 1 end) as reaction_status_6
		from 
		    tbl_reaction r
		join 
		    tbl_board b
		    on r.reaction_target_no = b.board_no
		where 
		    b.board_no = #{board_no}
	</select>	
	
	
	<!-- 답글 조회하기 -->
	<select id="getRelplyComments" parameterType="String" resultType="CommentVO">
		select c.comment_no, c.fk_board_no, c.fk_member_id, c.comment_content, c.comment_parent_no, c.comment_group_no, c.comment_depth, c.comment_register_date, m.member_name, m.member_profile
		from tbl_comment c
		join tbl_member m
		on c.fk_member_id = m.member_id
		where c.comment_parent_no = #{comment_no} and c.comment_depth = 1
		order by c.comment_register_date desc
	</select>
	
	
	<!-- 댓글에 대한 답글 수 구하기 -->
	<select id="getReplyCount" parameterType="String">
		select count(*) as replyCount
		from tbl_comment
		where comment_parent_no = #{comment_no} and comment_depth = 1
	</select>


	<!--연규영이 추가, 알림에 추가할 게시물 정보-->
	<select id="findOneBoardByBoardNo" resultType="BoardVO">
		select board_no, fk_member_id, board_content
		from tbl_board
		where board_no = #{board_no}
	</select>
	
	
	<!-- 게시글 하나만 조회 -->
	<select id="boardOneSelect" parameterType="String">
		SELECT b.board_no, b.fk_member_id, b.board_content, b.board_visibility, 
		       b.board_comment_allowed, b.board_register_date, b.board_parent_no, 
		       b.board_group_no, b.board_depth, b.board_is_delete,
		       m.member_id, m.member_name, m.member_birth, m.member_profile
		FROM tbl_board b
		JOIN tbl_member m ON b.fk_member_id = m.member_id
		where b.board_no = #{board_no} and b.board_is_delete = 0 
	</select>
</mapper>